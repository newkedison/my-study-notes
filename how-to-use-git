=Git常用命令及使用心得=

Git陡峭的学习曲线，使得我实在无法光靠脑子记住那么多的命令，未免同样的问题一遍又一遍的Google，还是记录下来比较好

[本文约定]
1.如无特别说明，“git add“， ”git-add“，”add“都指的是”git add“这个命令，其他类似
2.所有$开头的行，都是指命令行输入的内容

[一般提交流程]
1.首先把当前改动的内容，先加入暂存区（后文详述）
$ git add .
也可以指定文件名以实现只加入部分改变
2.提交到本地仓库，用-m参数指定提交说明，不能为空，否则提交失败
如果不用-m，则会调用文本输入工具，让我们输入，反正就是不允许没有任何说明的提交
$ git commit -m "....."
3.如果决定要同步到中心库，则用git-push
$ git push
输入密码后，正常来说就可以提交成功了。

注意：
1.可以多次commit后，一次性push
2.用以下命令，可以省略git-add，-a是和--all等效，表示把所有修改放入暂存区
$ git commit -a -m "...."

[暂存区（staging area）]
git在提交的时候，有一个暂存区的概念，所有的修改，不会自动放入暂存区，必须手动使用git-add命令，才能把修改加入暂存区，而只有在暂存区的修改，才会在下一次commit时被提交到本地仓库
所以，git-add的概念和SVN以及Hg不同，并不只是把原来没有在版本库中的文件加入版本管理，即使是修改过的文件，也需要add，另外，在merge的时候，add可以把解决好的冲突加入暂存区
使用git-status命令，可以看到，如果是新增文件，状态是untracked，而如果是修改了文件，状态是not staged，这两种状态，都可以通过git-add，将其加入暂存区
另外，使用git add -i命令，可以交互式的进行add操作，省却输文件名的麻烦

如果是新增的文件，一开始状态是Untracked，执行git-add后，状态是staged，如果要取消，可以用
$ git reset HEAD <文件名>
如果是修改文件，一开始状态是Unstaged，执行git-add后，变成staged，如果要取消，也是用上面的命令
另外，如果文件已修改，但是还没add，状态是unstaged的时候，想放弃修改，恢复原来的版本，也就是实现revert的功能，则用
$ git checkout <文件名>

[使用vim编写提交说明]
默认的编写提交说明的工具，是古董级的nano，相当不好用，所以有必要换成vim
参考：http://imtx.me/archives/1201.html
有好几种办法
我用的是
$ export EDITOR=vim
另外还可以修改.git/config文件，在core段，加入editor=vim这一句（我还没测试过，不过应该好使）

vim: ft=mynotes
