---
title: Android程序破解
description: descript how to decompile an android app and crack it
created: !!timestamp '2012-10-03 11:33:19'
tags:
    - android
    - crack
---

{% raw %}

# 前言

===

破解别人的软件总归是不正确的, 但是就像毒品一样, 无论其多么罪大恶极, 
只要有软件开发, 就肯定有软件破解, 一个软件如果没有被破解, 
唯一的理由就是其不够出名, 不够有用

作为软件开发者, 有太多的理由学习破解, 对我来说, 至少有以下两个原因:

1. 反编译别人的软件, 是学习别人开发思路的一个好方法

2. 虽然反编译无法避免, 但是只有了解其基本原理, 才能将被反编译后的风险降至最低

这里要先讲讲我对几个概念的理解

**反编译**

就是decompile, 一般指的就是将别人编译过的程序, 重新反向解析为其原始的样子, 
但是, 目前主流的程序开发语言, 可以分为三种, 

* 一种是如python, js这类脚本语言,  其根本就没有被编译, 所以也无需反编译

* 一种是像C, pascal这类编译型的语言, 反编译的话, 基本只能反编译到汇编级代码, 
不可能反编译到原始的代码, 对于这类语言, 反编译一般也叫反汇编(disassembly)

* 还有一种是像java和C#这种基于虚拟机的语言, 一般是可以反编译到一种中间语言, 
这种中间语言, 比汇编相对要好理解, 好修改一些, 所以其安全性介于上面的两种

**破解**

破解是一种手段, 其目的一般是为了突破原来软件的一些限制. 破解的手段千奇百怪, 
一切以达到目的为首要目标, 大部分情况下, 都必须在反编译之后, 通过分析其中的代码,
然后进行一些技术处理, 实现自己的目标. 

# 参考资料

===

[Designing for Security](http://developer.android.com/guide/practices/security.html)

这篇是android官网在讲如何增加安全性, 我还没好好看

[Android应用程序基础破解](http://www.jybase.net/ruanjianpojie/20120329811.html)

这篇写的还不错, 有原理, 有实例

[android-apktool](https://code.google.com/p/android-apktool/)

apktool是一个集成了大部分破解android程序所需工具的开源项目, 
基本上有这个工具就足够满足我们全部需求了

# Android程序的安全性

就我目前的理解, android程序的安全性是较低的, 主要原因有以下几点:

1. 资源文件没有很强的加密, 经过apktool处理之后, 所有的资源文件(包括各个xml文件,
各种图片和视频文件)都可以很轻松的还原出来, 
其中的xml文件会给后面破解带来很多方便, 而图片和视频, 则会导致版权被侵犯

2. android是运行于虚拟机上面的, 属于上面的第三种情况, 虽然google自创了一种叫
Dalvik 的虚拟机, 但是这并不能提高安全性, 而且其设计的首要目的是效率, 
而不是安全性, 他把安全性的任务更多的交给了底层的linux系统. 所以, 从apktook
反编译出来的smali代码, 认真看还是可以看懂的, 比用OD看汇编要容易的多. 而且, 
据说用netbean还可以直接单步调试反编译出来的smali代码, 这就更加的方便了.

3. linux系统本身的安全性是很高的, google的做法也没错, 既然系统很安全, 
那就没必要画蛇添足的降低效率来提高虚拟机的安全性. 但是, 就目前来说, 
很多人的手机都root过, 这大大降低了linux系统的安全性. 
原来我对root的危险性并没有太注意, 后来看到, 
android是通过每个程序用一个用户账户来运行这种方式来隔离不同的程序,
这对于没有root权限的程序来说, 是很安全的, 但是对于拥有root权限的程序,
他可以**任意**访问(读写)别人程序的文件, 这样实在是非常的危险. 当然, 
这只是基于我自己的理解, 可能有些杞人忧天, 但是, 
至少以后要给程序root权限的时候要慎重, 特别是如360这类软件(我没装过360, 
不太清楚其需不需要root权限)




{% endraw %}
{# vim: ft=markdown
#}
