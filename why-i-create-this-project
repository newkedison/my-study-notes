为什么建立这个项目？

建立这个项目主要有几个目的：
1. 实际感受git，以比较git，hg，svn三者的优缺点
2. 找一个托管平时学习心得的地方
3. 分享自己的知识

[Git/Hg/svn的比较]
关于这个问题，我已经纠结了至少有一个月了，还是没有一个定论，很久很久以前，没有版本管理的概念，感觉代码的升级是一件多么痛苦的事情，但是很久以前，接触了VSS，才知道原来有版本管理这种说法，从此沉迷其中，不能自拔。
最近的一年多来，又接触了SVN，本来以为他是一个洪水猛兽，无法近而亵玩，待到走近一看，居然是一个自来熟的邻家小妹。毫不犹豫的，VSS被我弃之如敝履，两者根本没有比较的必要。
虽说用了超过一年了，服务器，客户端都整过，但是说实话，我对他的了解实在还是比较有限，但是就靠这些有限的了解，他已经给我带来了巨大的好处，我觉得已经不可能有其他奢求了
大概一个多月前，我抱着无聊试一试的心态，在Google Code上建了一个项目，然后选版本管理软件的时候，鬼使神差的，选了Hg，然后开始摸索Hg的使用。
Hg的上手实在是太简单，只要对SVN略有了解的，上手Hg根本是毫无压力，然后我就发现分布式本版管理的优点了，即使我是我自己管理自己的代码，在多个电脑之间同步的话，分布式管理比起集中管理也是具有无可比拟的优势，因为其根本就不需要一个服务器，大家是平等的，不会说由于哪个电脑没开机，其他电脑就没地方提交。
这个时候我开始彷徨，纠结，迷茫了，然后开动Google，这时候，Git也进入我是视野，这下成了三国混战，我在这三个工具之间没法抉择了。前面这个还没纠结完，我又在纠结到底是GitHub还是Google Code了，实际上这两个选择是密切相关了，我死锁了。
下面从多个方面，列举我对这两个问题的比较：
1.分布式与集中式的比较，前面我说了一个分布式的优点。其实分布式最大的优点在于大部分的提交工作我们可以在自己的工作目录中解决，然后最后找个网速好的地方，向中心服务器push一下就可以了。如果对于跨国企业或者稍微大型一点的企业来说，分布式是唯一正确的选择，但是对于小型公司，大家都在一个局域网里面，弄一个稳定高速的服务器还是轻而易举的，所以分布式的优点并不是很明显。
2.我很喜欢SVN可以单独管理每个文件夹的这个设置，每个文件夹可以单独设置权限，这样感觉整体性比较好，但是Hg我Google了无数个地方，试了N种方法，最终都实现不了这个功能，Git还没试过，估计也不容乐观，我认为是由于.hg和.git这个文件夹在每个版本库中只有一个导致了这个问题，而.svn是每个文件夹里面都有一个，所以每个文件夹可以单独设置权限。但是，据说SVN最近在考虑是否要也模仿Hg和Git，弄单独一个.svn文件夹，怎么说呢，单个文件夹也并非就实现不了每个文件夹单独管理的功能，只是比较麻烦而已，而且多个文件夹的确有值得诟病的地方，但是我还是觉得不管怎么实现，这种对每个文件夹单独管理的功能，对我来说还是比较有用的
3.在这三者的比较上，最有名的一篇文章就是Google当时在考虑建立Google Code的时候，他们写的一篇比较的文章，但是我觉得这篇文章对我来说真没太大的参考意义，因为他们的立足点是Google强大的技术实力和现有的强大设施，这都是我们不可能具备的。而且，文章也是很久以前的了，一开始Google Code只支持SVN，现在已经可以支持Hg和Git了，这也可以看出，他们的思路也在转变，据说是有一种什么技术，可以同时支持这3种版本管理系统，所以Google就拿来用了。还据说，Google Code将来如果要选择舍弃一种的话，肯定是先舍弃SVN（当然，这都是我看到的一面之辞）。
4.现在用SVN的项目似乎在逐步减少，大部分在向Hg和Git转移（这也是我的个人感觉，虽然我无法举出来例子，但是这只是因为我没去记而已，我看过好几个开源项目都舍弃SVN了）。其实我觉得这基本是肯定的，对于开源项目来说，分布式管理的优点太明显。都说背靠大树好乘凉，软件界也是一直遵循着马太效应，好的项目，用的人多，改进的快，用的人就越多，而稍差的无人问津，最终无疾而终。所以，选择一个平台，考虑长远的改进是很必要的，从目前的情况来看，SVN已经被逐渐边缘化，Hg以优秀的跨平台性能，正如日中天，Git由于Linux这个强大的靠山，肯定也会持续快速发展。
5.在跨平台上，SVN没什么问题，各种工具齐备，Hg由于采用Python开发，更加是不成问题，而Git就差强人意了，据我看到的资料来说，虽然有TortoiseGit这个东西，但是总会存在各种奇怪的问题，目前比较靠谱的在Windows上用Git的方法，还是利用Cygwin模拟。Windows在Git界就属于二等公民（反之亦然），各种最新的版本肯定很难及时得到支持的。我自己用Ubuntu，或者在Windows上用Cygwin都问题不到，但是如果要推荐别人来使用，就比较麻烦了，有时候这会造成很大的障碍。而SVN和Hg就没有这个问题，都有对应的工具，学习成本比较低。
6.还有学习曲线，SVN和Hg都比较简单，而Git则相对较复杂，如果是自己用，花时间学习也就罢了，但是如果要推荐别人一起用，别人不一定乐意花这些时间来学习，那也就很难推广了。
7.现在Google Code三种工具都支持，而GitHub只支持Git，然后Hg有一个叫bitbucket支持，这三个网站都是拥有大量的用户（可能bitbucket略逊），不用担心半路关门。从我的个人感情来说，当然选择Google Code，但是我很担心，是不是有一天Google踩到了某些雷区，然后所有Google的服务都无法访问了，这将是毁灭性的。其他两个网站相对比较低调，也比较单纯，被墙的可能性要低得多。另外，似乎无论从外观还是功能来看，GitHub都完胜Google Code。
8.SVN是纯C开发，可移植性较强，Hg是Python+少量C开发，直接跨平台，但是其命运和Python息息相关，虽然现在Python大红大紫，但是并非没有对手。Git用C+Shell脚本开发，导致跨平台性较差。
9.SVN和Hg都是遵循版本历史不可修改，而Git则不是，我觉得虽然不能修改存在一些不能解决的问题，但是利大于弊。

总结起来，SVN有一些我比较欣赏的功能，也能满足我目前的需求，但是没有后台，前途不明朗，而且对未来的需求可能不一定满足。
Hg容易使用，容易推广，无论现在还是为了的需求，都能满足，但是缺少强有力的后台，而且某些功能感觉比较别扭
Git前景最好，功能最强，但是较难上手，跨平台性较差，也是有些功能比较别扭


