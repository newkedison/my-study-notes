---
title: java使用笔记
description: 为了编写android程序, 不得不使用java, 记录一些常见的问题
created: !!timestamp '2012-09-14 20:17:29'
tags:
    - tips
    - java
---

{% raw %}

## java使用笔记

### 前言

为了写android程序, 迫不得已学习java程序的编写, 在一边写一边google的过程中, 
解决了一些常见的问题, 这里做一下记录,

### 类名与文件名

java规定, 在一个文件中, 最外层只能有一个public的类或者接口, 
而且文件名(去掉.java)必须和类名一样. 我觉得这是一个很不合理的规定, 
但是也只能遵守.

一个将就点的方法, 就是在所有的类和接口外面套上一个没用的public类, 比如:

    package com.example.test;
    public useless_wrapper {
      public class class1 {...}
      public class class2 {...}
      interface interface1 {...}
    }

其他需要用到这些类的的地方, 如果只要用到一个类或接口, 就单独import一个, 
如果要用到多个, 那么用:

    import com.example.test.useless_wrapper.*;

这样在文件里面, 就可以直接写类名和接口名了

### 动态数组

java里面的数组一旦定义, 长度就无法改变, 所以就没有真正的动态数组.
要实现动态数组, 必须自己封装一个类, 把数组放在里面, 然后一旦长度改变, 
就要重新分配空间, 并把原来的内容复制过来. 当然, 这样做的效率肯定是很差的.

java提供了
[ArrayList](http://docs.oracle.com/javase/6/docs/api/java/util/ArrayList.html)
这个类, 可以实现类似于vector的功能, 不过似乎初始化很麻烦

### 访问范围

对于一个类中的变量或者函数, 可以用public, private, protected来修饰, 
也可以不用. 这样就有四种不同的访问控制级别. 

另外, java有package的概念, 但是没有友元的概念, 综合起来就是下面一张表格:
<table class="table table-striped table-bordered">
  <theader>
    <tr>
      <th>修饰符</th><th>类中其他函数</th><th>同package的其他类</th>
      <th>子类</th><th>其他package的类</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>public</th>
      <td>Y</td><td>Y</td><td>Y</td><td>Y</td>
    </tr>
    <tr>
      <th>protected</th>
      <td>Y</td><td>Y</td><td>Y</td><td>N</td>
    </tr>
    <tr>
      <th>无修饰符</th>
      <td>Y</td><td>Y</td><td>N</td><td>N</td>
    </tr>
    <tr>
      <th>private</th>
      <td>Y</td><td>N</td><td>N</td><td>N</td>
    </tr>
  </tbody>
</table>
其中Y表示可以访问, N表示无法访问. 具体内容可以参考
[来源](http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html)

### LinkedList几个常用方法的异同

java的
[LinkedList](http://docs.oracle.com/javase/6/docs/api/java/util/LinkedList.html)
提供了好几组功能类似的方法, 用起来经常不知道选择哪个, 
而且其自身的文档也说的不清不楚, 还是在
[android developer](http://developer.android.com/reference/java/util/LinkedList.html)
里面的说明比较清楚, 这里把他们对比一下

#### add/addFirst/addLast/offer/offerFirst/offerLast

add系和offer系的区别, 就在于如果添加失败, add系会抛出异常, 而offer系会返回false.

然后add和addLast应该是完全相同的, 但是目前找不到哪里有明确的说明, 
addFirst和addLast从名字上就可以看出来差别了. 类似的, offer/offerFist/offerLast
的关系也是类似的

#### get/element/peek/poll/pop

get系和peek系都是只访问链表中的元素, 不将其删除, 两者的区别在于get系抛异常,
而peek系返回false

poll系会在访问元素时顺便将其remove掉, 但是要注意只能从链表头部或者尾部操作
(其实他们是继承自deque的操作), 没有类似于extract这样从任意位置取出元素的方法

element函数等价于getFirst, 应该也等价于get(0)

pop说是等价于removeFirst, 应该也是等价于poll和pollFirst

**注意**

LinkedList之所以有这么多乱七八糟的方法, 主要是因为继承了很多的类和接口, 
一般来说, 正确是使用方法应该是:

    List<T> list = new LinkedList<T>();

这样就只使用List这个接口提供的方法, 看起来要清爽一些

### LinkedList/ArrayList/Vector

参考来源:
[When to use LinkedList<> over ArrayList<>?](http://stackoverflow.com/questions/322715/when-to-use-linkedlist-over-arraylist)  
[Wrapper Implementations](http://docs.oracle.com/javase/tutorial/collections/implementations/wrapper.html)

LinkedList是通过双向链表来实现的, 而ArrayList是通过数组来实现的,
所以他们的不同点就是链表和数组的不同点, 这是基本常识, 这里就不展开了,
第一个参考来源里面讲的很详细了

Vector可以说是一个线程安全的ArrayList, 不过据说一般都不需要用到, 
因为java后来提供了一组wrapper, 用来把原来不是线程安全的Collection变成线程安全.
参考上面的第二个链接

### import static

由于java无论什么总归要套一个class, 所以当把一些常用的常量或者函数放在一个class
里面之后, 在调用的时候总要写类名, 这显然很麻烦

还好那帮整java的大佬爷们估计自己也用烦了, 所以整出来import static的方法.

参考[这里](http://docs.oracle.com/javase/1.5.0/docs/guide/language/static-import.html),
可以看到, 只要类里面用static声明的常量/变量/函数, 然后用import static将其import,
那么后面就可以不需要写类名了.

当然, `import static com.example.util.*;`也是可以的, 也是更常用的.



{% endraw %}
{# vim: ft=markdown
#}
